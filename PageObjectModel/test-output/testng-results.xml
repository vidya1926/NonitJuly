<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="2" passed="0" failed="0" skipped="2">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-09-25T14:39:30 IST" name="Suite" finished-at="2022-09-25T14:39:42 IST" duration-ms="11324">
    <groups>
    </groups>
    <test started-at="2022-09-25T14:39:30 IST" name="Test" finished-at="2022-09-25T14:39:42 IST" duration-ms="11324">
      <class name="testcases.CreateLead">
        <test-method is-config="true" signature="startReport()[pri:0, instance:testcases.CreateLead@75d3a5e0]" started-at="2022-09-25T14:39:25 IST" name="startReport" finished-at="2022-09-25T14:39:30 IST" duration-ms="4971" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startReport -->
        <test-method is-config="true" signature="setfileName()[pri:0, instance:testcases.CreateLead@75d3a5e0]" started-at="2022-09-25T14:39:30 IST" name="setfileName" finished-at="2022-09-25T14:39:30 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setfileName -->
        <test-method is-config="true" signature="testDetails()[pri:0, instance:testcases.CreateLead@75d3a5e0]" started-at="2022-09-25T14:39:31 IST" name="testDetails" finished-at="2022-09-25T14:39:31 IST" duration-ms="10" status="FAIL">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[testName cannot be null or empty]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: testName cannot be null or empty
at com.aventstack.extentreports.ExtentTest.<init>(ExtentTest.java:80)
at com.aventstack.extentreports.ExtentTest.<init>(ExtentTest.java:100)
at com.aventstack.extentreports.ExtentReports.createTest(ExtentReports.java:238)
at baseclass.ProjectSpecificMethod2.testDetails(ProjectSpecificMethod2.java:65)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:176)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:122)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:831)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDetails -->
        <test-method is-config="true" signature="preCondition(java.lang.String,java.lang.String)[pri:0, instance:testcases.CreateLead@75d3a5e0]" started-at="2022-09-25T14:39:41 IST" name="preCondition" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1664096981974" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preCondition -->
        <test-method signature="runCreateLead(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:testcases.CreateLead@75d3a5e0]" started-at="2022-09-25T14:39:41 IST" name="runCreateLead" data-provider="testData" finished-at="2022-09-25T14:39:41 IST" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[demosalesManager]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[crmsfa]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Testleaf]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Hari]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[R]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[testName cannot be null or empty]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: testName cannot be null or empty
at com.aventstack.extentreports.ExtentTest.<init>(ExtentTest.java:80)
at com.aventstack.extentreports.ExtentTest.<init>(ExtentTest.java:100)
at com.aventstack.extentreports.ExtentReports.createTest(ExtentReports.java:238)
at baseclass.ProjectSpecificMethod2.testDetails(ProjectSpecificMethod2.java:65)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:176)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:122)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:831)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCreateLead -->
        <test-method is-config="true" signature="postCondition()[pri:0, instance:testcases.CreateLead@75d3a5e0]" started-at="2022-09-25T14:39:42 IST" name="postCondition" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1664096982082" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postCondition -->
        <test-method is-config="true" signature="preCondition(java.lang.String,java.lang.String)[pri:0, instance:testcases.CreateLead@75d3a5e0]" started-at="2022-09-25T14:39:42 IST" name="preCondition" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1664096982142" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preCondition -->
        <test-method signature="runCreateLead(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:testcases.CreateLead@75d3a5e0]" started-at="2022-09-25T14:39:42 IST" name="runCreateLead" data-provider="testData" finished-at="2022-09-25T14:39:42 IST" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[demosalesManager]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[crmsfa]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[TL]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Vidya]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[R]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[testName cannot be null or empty]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: testName cannot be null or empty
at com.aventstack.extentreports.ExtentTest.<init>(ExtentTest.java:80)
at com.aventstack.extentreports.ExtentTest.<init>(ExtentTest.java:100)
at com.aventstack.extentreports.ExtentReports.createTest(ExtentReports.java:238)
at baseclass.ProjectSpecificMethod2.testDetails(ProjectSpecificMethod2.java:65)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:176)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:122)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:831)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runCreateLead -->
        <test-method is-config="true" signature="postCondition()[pri:0, instance:testcases.CreateLead@75d3a5e0]" started-at="2022-09-25T14:39:42 IST" name="postCondition" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1664096982225" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postCondition -->
        <test-method is-config="true" signature="stopReport()[pri:0, instance:testcases.CreateLead@75d3a5e0]" started-at="2022-09-25T14:39:42 IST" name="stopReport" finished-at="2022-09-25T14:39:42 IST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stopReport -->
      </class> <!-- testcases.CreateLead -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
